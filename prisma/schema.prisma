generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(cuid())
  username  String     @unique
  email     String     @unique
  password  String
  avatar    String?
  favorites Favorite[]
  history   History[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Manga {
  id          String         @id @default(cuid())
  title       String
  description String
  coverImage  String
  author      String
  genres      Genre[]        @relation("MangaGenres")
  chapters    MangaChapter[]
  status      MangaStatus
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  favorites   Favorite[]
  history     History[]
}

model Anime {
  id          String      @id @default(cuid())
  title       String
  description String
  coverImage  String
  studio      String
  genres      Genre[]     @relation("AnimeGenres")
  episodes    Episode[]
  status      AnimeStatus
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  favorites   Favorite[]
  history     History[]
}

model Novel {
  id          String         @id @default(cuid())
  title       String
  description String
  coverImage  String
  author      String
  genres      Genre[]        @relation("NovelGenres")
  chapters    NovelChapter[]
  status      NovelStatus
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  favorites   Favorite[]
  history     History[]
}

model MangaChapter {
  id            String   @id @default(cuid())
  title         String
  mangaId       String
  manga         Manga    @relation(fields: [mangaId], references: [id])
  content       String
  chapterNumber Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Episode {
  id            String   @id @default(cuid())
  title         String
  animeId       String
  anime         Anime    @relation(fields: [animeId], references: [id])
  duration      Int
  episodeNumber Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model NovelChapter {
  id            String   @id @default(cuid())
  title         String
  novelId       String
  novel         Novel    @relation(fields: [novelId], references: [id])
  content       String
  chapterNumber Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Genre {
  id     String  @id @default(cuid())
  name   String  @unique
  mangas Manga[] @relation("MangaGenres")
  animes Anime[] @relation("AnimeGenres")
  novels Novel[] @relation("NovelGenres")
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  mangaId   String?
  manga     Manga?   @relation(fields: [mangaId], references: [id])
  animeId   String?
  anime     Anime?   @relation(fields: [animeId], references: [id])
  novelId   String?
  novel     Novel?   @relation(fields: [novelId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model History {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  mangaId   String?
  manga     Manga?   @relation(fields: [mangaId], references: [id])
  animeId   String?
  anime     Anime?   @relation(fields: [animeId], references: [id])
  novelId   String?
  novel     Novel?   @relation(fields: [novelId], references: [id])
  progress  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum MangaStatus {
  ONGOING
  COMPLETED
  PAUSED
}

enum AnimeStatus {
  ONGOING
  COMPLETED
  PAUSED
}

enum NovelStatus {
  ONGOING
  COMPLETED
  PAUSED
}
